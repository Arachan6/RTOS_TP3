#include "priority_queue.h"

static QueueHandle_t priorityQueue;
static uint32_t currentTimestamp = 0;

void PriorityQueue_Init() {
	priorityQueue = xQueueCreate(MAX_QUEUE_SIZE, PriorityMessage);
    while (NULL == hao->hqueue){}
    priorityQueue.size = 0;
}

bool PriorityQueue_Send(void *data, uint8_t priority) {
    if (priorityQueue.size >= MAX_QUEUE_SIZE) {
        return false;  // Cola llena
    }

    // Inserta el mensaje
    PriorityMessage newMessage = {
        .timestamp = currentTimestamp++,
        .priority = priority,
        .data = data
    };
    priorityQueue.messages[priorityQueue.size++] = newMessage;

    // Reorganiza la cola por prioridad y timestamp (criterios de desempate)
    for (size_t i = 0; i < priorityQueue.size - 1; i++) {
        for (size_t j = i + 1; j < priorityQueue.size; j++) {
            if ((priorityQueue.messages[i].priority < priorityQueue.messages[j].priority) ||
                (priorityQueue.messages[i].priority == priorityQueue.messages[j].priority &&
                 priorityQueue.messages[i].timestamp > priorityQueue.messages[j].timestamp)) {

            	// Intercambia los mensajes
                PriorityMessage temp = priorityQueue.messages[i];
                priorityQueue.messages[i] = priorityQueue.messages[j];
                priorityQueue.messages[j] = temp;
            }
        }
    }

    return true;
}

bool PriorityQueue_Receive(void **data) {
    if (priorityQueue.size == 0) {
        return false;  // Cola vac√≠a
    }

    // Devuelve el mensaje de mayor prioridad
    *data = priorityQueue.messages[0].data;

    // Desplaza los mensajes hacia adelante
    for (size_t i = 1; i < priorityQueue.size; i++) {
        priorityQueue.messages[i - 1] = priorityQueue.messages[i];
    }
    priorityQueue.size--;

    return true;
}
